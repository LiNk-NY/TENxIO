% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/TENxVisium-class.R
\docType{class}
\name{TENxVisium-class}
\alias{TENxVisium-class}
\alias{.TENxVisium}
\alias{TENxVisium}
\alias{import,TENxVisium,ANY,ANY-method}
\title{A class to represent and import Visium data}
\usage{
TENxVisium(
  resources,
  spatialResource,
  spacerangerSamp,
  sample_id = "sample01",
  processing = c("filtered", "raw"),
  images = c("lowres", "hires", "detected", "aligned"),
  jsonFile = .SCALE_JSON_FILE,
  tissuePattern = "tissue_positions.*\\\\.csv",
  spatialCoordsNames = c("pxl_col_in_fullres", "pxl_row_in_fullres"),
  ...
)

\S4method{import}{TENxVisium,ANY,ANY}(con, format, text, ...)
}
\arguments{
\item{resources}{A \link{TENxFileList} object or a file path to the tarball
containing the matrix / assay data resources.}

\item{spatialResource}{A \link{TENxSpatialList} object or a file path to the
tarball containing the spatial data.}

\item{spacerangerSamp}{\code{character(1)} A single string specifying the path to
the sample directory of \verb{spaceranger count}. The directory must contain the
\code{filtered_feature_bc_matrix} and \code{spatial} subdirectories in addition to
the \code{outs} folder.}

\item{sample_id}{\code{character(1)} A single string specifying the sample ID.}

\item{images}{\code{character()} A vector specifying the images to be imported;
can be one or multiple of "lowres", "hires", "detected", "aligned".}

\item{jsonFile}{\code{character(1)} A single string specifying the name of the
JSON file containing the scale factors.}

\item{tissuePattern}{\code{character(1)} A single string specifying the pattern
to match the tissue positions file.}

\item{spatialCoordsNames}{\code{character()} A vector of strings specifying the
names of the columns in the spatial data containing the spatial coordinates.}

\item{...}{In the constructor, additional arguments passed to
\code{\link[=TENxFileList]{TENxFileList()}}; otherwise, not used.}

\item{con}{The connection from which data is loaded or to which data is
saved. If this is a \code{character} vector, it is assumed to be a file name and
a corresponding file connection is created and then closed after exporting
the object. If it is a \linkS4class{BiocFile} derivative, the data is loaded from
or saved to the underlying resource. If missing, the function will return
the output as a character vector, rather than writing to a connection.}

\item{format}{The format of the output. If missing and \code{con} is a
file name, the format is derived from the file extension. This argument is
unnecessary when \code{con} is a derivative of \linkS4class{BiocFile}.}

\item{text}{If \code{con} is missing, this can be a character vector directly
providing the string data to import.}
}
\value{
A \link{SpatialExperiment} object
}
\description{
This class is a composed class of \link{TENxFileList} which can
contain a list of \link{TENxFile} objects and a \link{TENxSpatialList} object. It is
meant to handle Visium data from 10X Genomics.

\code{TENxVisium} is a class to represent and import Visium data. It
is a composed class of \link{TENxFileList} which can contain a list of
\link{TENxFile} objects and a \link{TENxSpatialList} object.
}
\details{
Typically, the user will not create an object of this class directly
but rather use the \code{\link[=TENxVisium]{TENxVisium()}} constructor function to create an object
of this class.
}
\section{Functions}{
\itemize{
\item \code{import(con = TENxVisium, format = ANY, text = ANY)}: Import Visium data

}}
\section{Slots}{

\describe{
\item{\code{resources}}{A \link{TENxFileList} object containing the Visium data.}

\item{\code{spatialList}}{A \link{TENxSpatialList} object containing the spatial}

\item{\code{coordNames}}{\code{character()} A vector specifying the names
of the columns in the spatial data containing the spatial coordinates.}

\item{\code{sampleId}}{\code{character(1)} A scalar specifying the sample identifier.}
}}

\examples{
\dontrun{
    spatialtar <- "~/data/V1_Adult_Mouse_Brain_spatial.tar.gz" 
    dir.create(sdir <- tempfile())
    untar(spatialtar, exdir = sdir)

    matrixtar <-
        "~/data/V1_Adult_Mouse_Brain_filtered_feature_bc_matrix.tar.gz" 
    dir.create(mdir <- tempfile())
    untar(matrixtar, exdir = mdir)

    tv <- TENxVisium(
        resources = mdir, spatialResource = tdir, images = "lowres"
    )
    import(tv)

    ## SpaceRanger sample folder
    sampdir <- file.path(tempfile(), "sample345")
    outsdir <- file.path(sampdir, "outs")
    dir.create(outsdir, recursive = TRUE)
    untar(spatialtar, exdir = outsdir)
    untar(matrixtar, exdir = outsdir)
    TENxVisium(spacerangerSamp = sampdir)    

    unlink(sdir, recursive = TRUE)
    unlink(mdir, recursive = TRUE)
    unlink(srsdir, recursive = TRUE)
}
}
\seealso{
\url{https://support.10xgenomics.com/spatial-gene-expression/software/pipelines/latest/output/overview}
}
